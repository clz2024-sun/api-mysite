name: Deploy attach App


#on:
#  workflow_dispatch:
#    inputs:


on:
  push:
    branches:
      - master # 마스터 브런치로 깃허브에 push되었을때

jobs: # 작업을 정의
  build-and-deploy:	# 첫번째작업: 빌드 및 배포
    runs-on: ubuntu-latest			# 가상의 최신우분투(리눅스종류임) 컴퓨터가 만들어짐
    steps:							# step은 job안쪽에 개별단계를 의미
      - name: Checkout code			# 단계이름 'Checkout code(소스가져오기)' 
        uses: actions/checkout@v3	# 깃허브에서 제공하는 checkout@v3 기능 사용하여 소스가져오기

      - name: Set up JDK 17			# 단계이름 'Set up JDK 17(jdk17설치)'
        uses: actions/setup-java@v2	# 깃허브에서 제공하는 setup-java@v2 기능 사용하여 JDK설치
        with:
          java-version: '17'		# 자바버전 17
          distribution: 'temurin'	# 'temurin' OpenJDK의 배포판 이름

      - name: Build with Maven
        run: mvn clean package

      - name: Build Docker image
        run: docker build -t clz2024sun/mysite:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: docker push clz2024sun/mysite:latest

         
  SSH:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: ssh to ec2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /home/ec2-user/upload
            sudo docker pull clz2024sun/mysite:latest
            sudo docker stop mysite || true
            sudo docker rm mysite || true
            sudo docker run -d \
              --name attach \
              -p 9000:9000 \
              -v /home/ec2-user/upload:/app/upload \
              clz2024sun/mysite:latest